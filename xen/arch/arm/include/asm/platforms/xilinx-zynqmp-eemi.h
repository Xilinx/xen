/*
 * Copyright (c) 2018 Xilinx Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms and conditions of the GNU General Public
 * License, version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef __ASM_ARM_PLATFORMS_ZYNQMP_H
#define __ASM_ARM_PLATFORMS_ZYNQMP_H

#include <asm/processor.h>
#include <asm/smccc.h>

/* SMC function IDs for SiP Service queries */
#define ZYNQMP_SIP_SVC_CALL_COUNT       0xff00
#define ZYNQMP_SIP_SVC_UID              0xff01
#define ZYNQMP_SIP_SVC_VERSION          0xff03

#define EEMI_FID(fid) ARM_SMCCC_CALL_VAL(ARM_SMCCC_FAST_CALL, \
                                         ARM_SMCCC_CONV_64,   \
                                         ARM_SMCCC_OWNER_SIP, \
                                         fid)
enum pm_api_id {
    /* Miscellaneous API functions: */
    PM_GET_API_VERSION = 1, /* Do not change or move */
    PM_SET_CONFIGURATION,
    PM_GET_NODE_STATUS,
    PM_GET_OP_CHARACTERISTIC,
    PM_REGISTER_NOTIFIER,
    /* API for suspending of PUs: */
    PM_REQ_SUSPEND,
    PM_SELF_SUSPEND,
    PM_FORCE_POWERDOWN,
    PM_ABORT_SUSPEND,
    PM_REQ_WAKEUP,
    PM_SET_WAKEUP_SOURCE,
    PM_SYSTEM_SHUTDOWN,
    /* API for managing PM slaves: */
    PM_REQ_NODE,
    PM_RELEASE_NODE,
    PM_SET_REQUIREMENT,
    PM_SET_MAX_LATENCY,
    /* Direct control API functions: */
    PM_RESET_ASSERT,
    PM_RESET_GET_STATUS,
    PM_MMIO_WRITE,
    PM_MMIO_READ,
    PM_INIT,
    PM_FPGA_LOAD,
    PM_FPGA_GET_STATUS,
    PM_GET_CHIPID,
    /* ID 25 is been used by U-boot to process secure boot images */
    /* Secure library generic API functions */
    PM_SECURE_SHA = 26,
    PM_SECURE_RSA,
    /* Pin control API functions */
    PM_PINCTRL_REQUEST,
    PM_PINCTRL_RELEASE,
    PM_PINCTRL_GET_FUNCTION,
    PM_PINCTRL_SET_FUNCTION,
    PM_PINCTRL_CONFIG_PARAM_GET,
    PM_PINCTRL_CONFIG_PARAM_SET,
    /* PM IOCTL API */
    PM_IOCTL,
    /* API to query information from firmware */
    PM_QUERY_DATA,
    /* Clock control API functions */
    PM_CLOCK_ENABLE,
    PM_CLOCK_DISABLE,
    PM_CLOCK_GETSTATE,
    PM_CLOCK_SETDIVIDER,
    PM_CLOCK_GETDIVIDER,
    PM_CLOCK_SETRATE,
    PM_CLOCK_GETRATE,
    PM_CLOCK_SETPARENT,
    PM_CLOCK_GETPARENT,
    /* PLL control API functions */
    PM_PLL_SET_PARAMETER = 48,
    PM_PLL_GET_PARAMETER,
    PM_PLL_SET_MODE,
    PM_PLL_GET_MODE,
    PM_GET_TRUSTZONE_VERSION = 2563,
    PM_API_MAX
};

/**
 * @XST_PM_SUCCESS:		Success
 * @XST_PM_ARGS:		illegal arguments provided (deprecated)
 * @XST_PM_NOTSUPPORTED:	feature not supported  (deprecated)
 * @XST_PM_INVALID_PARAM:	invalid argument
 * @XST_PM_INTERNAL:	Unexpected error
 * @XST_PM_CONFLICT:	Conflicting requirements
 * @XST_PM_NO_ACCESS:	Access rights violation
 * @XST_PM_INVALID_NODE:	Does not apply to node passed as argument
 * @XST_PM_DOUBLE_REQ:	Duplicate request
 * @XST_PM_ABORT_SUSPEND:	Target has aborted suspend
 * @XST_PM_TIMEOUT:		timeout in communication with PMU
 * @XST_PM_NODE_USED:		node is already in use
 */
enum pm_ret_status {
    XST_PM_SUCCESS = 0,
    XST_PM_ARGS = 1,
    XST_PM_NOTSUPPORTED = 4,
    XST_PM_INVALID_PARAM = 15,
    XST_PM_INTERNAL = 2000,
    XST_PM_CONFLICT,
    XST_PM_NO_ACCESS,
    XST_PM_INVALID_NODE,
    XST_PM_DOUBLE_REQ,
    XST_PM_ABORT_SUSPEND,
    XST_PM_TIMEOUT,
    XST_PM_NODE_USED
};

/* IPI SMC function numbers enum definition and fids */
#define IPI_MAILBOX_FID(fid) ARM_SMCCC_CALL_VAL(ARM_SMCCC_FAST_CALL, \
                                                ARM_SMCCC_CONV_32,   \
                                                ARM_SMCCC_OWNER_SIP, \
                                                fid)
enum ipi_api_id {
    IPI_MAILBOX_OPEN = 0x1000,
    IPI_MAILBOX_RELEASE,
    IPI_MAILBOX_STATUS_ENQUIRY,
    IPI_MAILBOX_NOTIFY,
    IPI_MAILBOX_ACK,
    IPI_MAILBOX_ENABLE_IRQ,
    IPI_MAILBOX_DISABLE_IRQ,
};

enum pm_node_id {
	PM_DEV_UNKNOWN = 0,
	PM_DEV_APU,
	PM_DEV_APU_0,
	PM_DEV_APU_1,
	PM_DEV_APU_2,
	PM_DEV_APU_3,
	PM_DEV_RPU,
	PM_DEV_RPU_0,
	PM_DEV_RPU_1,
	PM_DEV_PLD,
	PM_DEV_FPD,
	PM_DEV_OCM_BANK_0,
	PM_DEV_OCM_BANK_1,
	PM_DEV_OCM_BANK_2,
	PM_DEV_OCM_BANK_3,
	PM_DEV_TCM_0_A,
	PM_DEV_TCM_0_B,
	PM_DEV_TCM_1_A,
	PM_DEV_TCM_1_B,
	PM_DEV_L2,
	PM_DEV_GPU_PP_0,
	PM_DEV_GPU_PP_1,
	PM_DEV_USB_0,
	PM_DEV_USB_1,
	PM_DEV_TTC_0,
	PM_DEV_TTC_1,
	PM_DEV_TTC_2,
	PM_DEV_TTC_3,
	PM_DEV_SATA,
	PM_DEV_ETH_0,
	PM_DEV_ETH_1,
	PM_DEV_ETH_2,
	PM_DEV_ETH_3,
	PM_DEV_UART_0,
	PM_DEV_UART_1,
	PM_DEV_SPI_0,
	PM_DEV_SPI_1,
	PM_DEV_I2C_0,
	PM_DEV_I2C_1,
	PM_DEV_SD_0,
	PM_DEV_SD_1,
	PM_DEV_DP,
	PM_DEV_GDMA,
	PM_DEV_ADMA,
	PM_DEV_NAND,
	PM_DEV_QSPI,
	PM_DEV_GPIO,
	PM_DEV_CAN_0,
	PM_DEV_CAN_1,
	PM_DEV_AFI,
	PM_DEV_APLL,
	PM_DEV_VPLL,
	PM_DEV_DPLL,
	PM_DEV_RPLL,
	PM_DEV_IOPLL,
	PM_DEV_DDR,
	PM_DEV_IPI_APU,
	PM_DEV_IPI_RPU_0,
	PM_DEV_GPU,
	PM_DEV_PCIE,
	PM_DEV_PCAP,
	PM_DEV_RTC,
	PM_DEV_LPD,
	PM_DEV_VCU,
	PM_DEV_IPI_RPU_1,
	PM_DEV_IPI_PL_0,
	PM_DEV_IPI_PL_1,
	PM_DEV_IPI_PL_2,
	PM_DEV_IPI_PL_3,
	PM_DEV_PL,
	PM_DEV_MAX
};

enum pm_reset {
	PM_RST_START = 999,
	PM_RST_PCIE_CFG,
	PM_RST_PCIE_BRIDGE,
	PM_RST_PCIE_CTRL,
	PM_RST_DP,
	PM_RST_SWDT_CRF,
	PM_RST_AFI_FM5,
	PM_RST_AFI_FM4,
	PM_RST_AFI_FM3,
	PM_RST_AFI_FM2,
	PM_RST_AFI_FM1,
	PM_RST_AFI_FM0,
	PM_RST_GDMA,
	PM_RST_GPU_PP1,
	PM_RST_GPU_PP0,
	PM_RST_GPU,
	PM_RST_GT,
	PM_RST_SATA,
	PM_RST_ACPU3_PWRON,
	PM_RST_ACPU2_PWRON,
	PM_RST_ACPU1_PWRON,
	PM_RST_ACPU0_PWRON,
	PM_RST_APU_L2,
	PM_RST_ACPU3,
	PM_RST_ACPU2,
	PM_RST_ACPU1,
	PM_RST_ACPU0,
	PM_RST_DDR,
	PM_RST_APM_FPD,
	PM_RST_SOFT,
	PM_RST_GEM0,
	PM_RST_GEM1,
	PM_RST_GEM2,
	PM_RST_GEM3,
	PM_RST_QSPI,
	PM_RST_UART0,
	PM_RST_UART1,
	PM_RST_SPI0,
	PM_RST_SPI1,
	PM_RST_SDIO0,
	PM_RST_SDIO1,
	PM_RST_CAN0,
	PM_RST_CAN1,
	PM_RST_I2C0,
	PM_RST_I2C1,
	PM_RST_TTC0,
	PM_RST_TTC1,
	PM_RST_TTC2,
	PM_RST_TTC3,
	PM_RST_SWDT_CRL,
	PM_RST_NAND,
	PM_RST_ADMA,
	PM_RST_GPIO,
	PM_RST_IOU_CC,
	PM_RST_TIMESTAMP,
	PM_RST_RPU_R50,
	PM_RST_RPU_R51,
	PM_RST_RPU_AMBA,
	PM_RST_OCM,
	PM_RST_RPU_PGE,
	PM_RST_USB0_CORERESET,
	PM_RST_USB1_CORERESET,
	PM_RST_USB0_HIBERRESET,
	PM_RST_USB1_HIBERRESET,
	PM_RST_USB0_APB,
	PM_RST_USB1_APB,
	PM_RST_IPI,
	PM_RST_APM_LPD,
	PM_RST_RTC,
	PM_RST_SYSMON,
	PM_RST_AFI_FM6,
	PM_RST_LPD_SWDT,
	PM_RST_FPD,
	PM_RST_RPU_DBG1,
	PM_RST_RPU_DBG0,
	PM_RST_DBG_LPD,
	PM_RST_DBG_FPD,
	PM_RST_APLL,
	PM_RST_DPLL,
	PM_RST_VPLL,
	PM_RST_IOPLL,
	PM_RST_RPLL,
	PM_RST_GPO3_PL_0,
	PM_RST_GPO3_PL_1,
	PM_RST_GPO3_PL_2,
	PM_RST_GPO3_PL_3,
	PM_RST_GPO3_PL_4,
	PM_RST_GPO3_PL_5,
	PM_RST_GPO3_PL_6,
	PM_RST_GPO3_PL_7,
	PM_RST_GPO3_PL_8,
	PM_RST_GPO3_PL_9,
	PM_RST_GPO3_PL_10,
	PM_RST_GPO3_PL_11,
	PM_RST_GPO3_PL_12,
	PM_RST_GPO3_PL_13,
	PM_RST_GPO3_PL_14,
	PM_RST_GPO3_PL_15,
	PM_RST_GPO3_PL_16,
	PM_RST_GPO3_PL_17,
	PM_RST_GPO3_PL_18,
	PM_RST_GPO3_PL_19,
	PM_RST_GPO3_PL_20,
	PM_RST_GPO3_PL_21,
	PM_RST_GPO3_PL_22,
	PM_RST_GPO3_PL_23,
	PM_RST_GPO3_PL_24,
	PM_RST_GPO3_PL_25,
	PM_RST_GPO3_PL_26,
	PM_RST_GPO3_PL_27,
	PM_RST_GPO3_PL_28,
	PM_RST_GPO3_PL_29,
	PM_RST_GPO3_PL_30,
	PM_RST_GPO3_PL_31,
	PM_RST_RPU_LS,
	PM_RST_PS_ONLY,
	PM_RST_PL,
	PM_RST_END
};

enum pm_clock {
    PM_CLK_IOPLL,
    PM_CLK_RPLL,
    PM_CLK_APLL,
    PM_CLK_DPLL,
    PM_CLK_VPLL,
    PM_CLK_IOPLL_TO_FPD,
    PM_CLK_RPLL_TO_FPD,
    PM_CLK_APLL_TO_LPD,
    PM_CLK_DPLL_TO_LPD,
    PM_CLK_VPLL_TO_LPD,
    PM_CLK_ACPU,
    PM_CLK_ACPU_HALF,
    PM_CLK_DBG_FPD,
    PM_CLK_DBG_LPD,
    PM_CLK_DBG_TRACE,
    PM_CLK_DBG_TSTMP,
    PM_CLK_DP_VIDEO_REF,
    PM_CLK_DP_AUDIO_REF,
    PM_CLK_DP_STC_REF,
    PM_CLK_GDMA_REF,
    PM_CLK_DPDMA_REF,
    PM_CLK_DDR_REF,
    PM_CLK_SATA_REF,
    PM_CLK_PCIE_REF,
    PM_CLK_GPU_REF,
    PM_CLK_GPU_PP0_REF,
    PM_CLK_GPU_PP1_REF,
    PM_CLK_TOPSW_MAIN,
    PM_CLK_TOPSW_LSBUS,
    PM_CLK_GTGREF0_REF,
    PM_CLK_LPD_SWITCH,
    PM_CLK_LPD_LSBUS,
    PM_CLK_USB0_BUS_REF,
    PM_CLK_USB1_BUS_REF,
    PM_CLK_USB3_DUAL_REF,
    PM_CLK_USB0,
    PM_CLK_USB1,
    PM_CLK_CPU_R5,
    PM_CLK_CPU_R5_CORE,
    PM_CLK_CSU_SPB,
    PM_CLK_CSU_PLL,
    PM_CLK_PCAP,
    PM_CLK_IOU_SWITCH,
    PM_CLK_GEM_TSU_REF,
    PM_CLK_GEM_TSU,
    PM_CLK_GEM0_TX,
    PM_CLK_GEM1_TX,
    PM_CLK_GEM2_TX,
    PM_CLK_GEM3_TX,
    PM_CLK_GEM0_RX,
    PM_CLK_GEM1_RX,
    PM_CLK_GEM2_RX,
    PM_CLK_GEM3_RX,
    PM_CLK_QSPI_REF,
    PM_CLK_SDIO0_REF,
    PM_CLK_SDIO1_REF,
    PM_CLK_UART0_REF,
    PM_CLK_UART1_REF,
    PM_CLK_SPI0_REF,
    PM_CLK_SPI1_REF,
    PM_CLK_NAND_REF,
    PM_CLK_I2C0_REF,
    PM_CLK_I2C1_REF,
    PM_CLK_CAN0_REF,
    PM_CLK_CAN1_REF,
    PM_CLK_CAN0,
    PM_CLK_CAN1,
    PM_CLK_DLL_REF,
    PM_CLK_ADMA_REF,
    PM_CLK_TIMESTAMP_REF,
    PM_CLK_AMS_REF,
    PM_CLK_PL0_REF,
    PM_CLK_PL1_REF,
    PM_CLK_PL2_REF,
    PM_CLK_PL3_REF,
    PM_CLK_WDT,
    PM_CLK_IOPLL_INT,
    PM_CLK_IOPLL_PRE_SRC,
    PM_CLK_IOPLL_HALF,
    PM_CLK_IOPLL_INT_MUX,
    PM_CLK_IOPLL_POST_SRC,
    PM_CLK_RPLL_INT,
    PM_CLK_RPLL_PRE_SRC,
    PM_CLK_RPLL_HALF,
    PM_CLK_RPLL_INT_MUX,
    PM_CLK_RPLL_POST_SRC,
    PM_CLK_APLL_INT,
    PM_CLK_APLL_PRE_SRC,
    PM_CLK_APLL_HALF,
    PM_CLK_APLL_INT_MUX,
    PM_CLK_APLL_POST_SRC,
    PM_CLK_DPLL_INT,
    PM_CLK_DPLL_PRE_SRC,
    PM_CLK_DPLL_HALF,
    PM_CLK_DPLL_INT_MUX,
    PM_CLK_DPLL_POST_SRC,
    PM_CLK_VPLL_INT,
    PM_CLK_VPLL_PRE_SRC,
    PM_CLK_VPLL_HALF,
    PM_CLK_VPLL_INT_MUX,
    PM_CLK_VPLL_POST_SRC,
    PM_CLK_CAN0_MIO,
    PM_CLK_CAN1_MIO,
    PM_CLK_ACPU_FULL,
    PM_CLK_GEM0_REF,
    PM_CLK_GEM1_REF,
    PM_CLK_GEM2_REF,
    PM_CLK_GEM3_REF,
    PM_CLK_GEM0_REF_UNGATED,
    PM_CLK_GEM1_REF_UNGATED,
    PM_CLK_GEM2_REF_UNGATED,
    PM_CLK_GEM3_REF_UNGATED,
    PM_CLK_END,
};

extern bool zynqmp_eemi(struct cpu_user_regs *regs);

#endif /* __ASM_ARM_PLATFORMS_ZYNQMP_H */

/*
 * Local variables:
 * mode: C
 * c-file-style: "BSD"
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 */
